from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT

# Initialize the document
doc = Document()

# Title
title = doc.add_heading(level=1)
title_run = title.add_run("Raspberry Pi File Server Project")
title_run.bold = True
title_run.font.size = Pt(16)
title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

# Student Details
doc.add_paragraph("Name: Saumitya Pareek")
doc.add_paragraph("Registration Number: 21BPS1408")
doc.add_paragraph("")  # Empty line for spacing

# Aim
doc.add_heading("Aim", level=2)
doc.add_paragraph("To set up a Raspberry Pi as a file server allowing the upload of .txt log files "
                  "generated by various machines. The server should accept files via a web interface "
                  "using the Raspberry Pi's IP address and store them in a designated directory.")

# Procedure
doc.add_heading("Procedure", level=2)

procedure_steps = [
    "1. Set up the Raspberry Pi and ensure it has Node.js installed.",
    "2. Install the required Node.js packages using the commands:",
    "   ```bash\n   sudo apt update\n   sudo apt install nodejs npm\n   npm install express express-fileupload\n   ```",
    "3. Create a project directory containing the following files:",
    "   - `server.js`: A Node.js script to set up the file server, handling form data and file upload.",
    "   - `public/index.html`: A simple HTML form for uploading log files with fields for Lab Name, Machine ID, and Engineer Name.",
    "4. Configure the server in `server.js` to:",
    "   - Listen on a specific port (default 3000) and serve the HTML form for file upload.",
    "   - Validate uploaded files, ensuring they are in .txt format and under 2MB in size.",
    "   - Rename uploaded files according to the pattern `MachineID_NameOfEngineer.txt` and save them in the `uploads` directory.",
    "5. Run the server using the command `node server.js` and access it via `http://<RPi_IP_Address>:3000` on any device in the same network.",
    "6. To keep the server running without a connected monitor, use the command `nohup node server.js &`.",
    "7. To check the Raspberry Piâ€™s IP address, use the command `hostname -I`. Use this IP address to access the file server from the browser.",
]

for step in procedure_steps:
    doc.add_paragraph(step)

# Result
doc.add_heading("Result", level=2)
doc.add_paragraph("The Raspberry Pi was successfully set up as a headless file server, allowing machines "
                  "on the network to upload .txt files via the provided IP address. Uploaded files were renamed "
                  "and saved in the specified directory based on the Machine ID and Engineer's name. The server "
                  "continued to function even without a monitor connection.")

# Save the document
doc.save("C:\\Users\\saumi\\OneDrive\\Desktop\\XD\\Raspberry_Pi_File_Server_Project_Saumitya_Pareek.docx")

